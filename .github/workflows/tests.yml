name: Tests and Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install coverage pytest h5py
        pip install -e .
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Run tests
      run: |
        pytest tests/ -v --tb=short

  coverage:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install coverage pytest h5py
        pip install -e .

    - name: Run tests with coverage
      run: |
        coverage run --source=src/rovibrational_excitation -m pytest tests/ -v --tb=short
        coverage report --show-missing
        coverage xml

    - name: Extract coverage percentage
      run: |
        COVERAGE_PERCENT=$(coverage report | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
        echo "Coverage: $COVERAGE_PERCENT%"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Coverage summary
      run: |
        echo "## 📊 テストカバレッジ結果" >> $GITHUB_STEP_SUMMARY
        echo "- **カバレッジ率**: ${COVERAGE_PERCENT}%" >> $GITHUB_STEP_SUMMARY
        echo "- **ファイル**: \`coverage.xml\` アップロード完了" >> $GITHUB_STEP_SUMMARY 