name: Code Quality & Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black mypy
        pip install -e .
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Run Ruff (linting)
      run: |
        ruff check . --output-format=github

    - name: Run Ruff (formatting)
      run: |
        ruff format --check .

    - name: Run Black (code style check)
      run: |
        black --check --diff .

    - name: Run type checking with mypy
      run: |
        mypy src/rovibrational_excitation/ --ignore-missing-imports --no-error-summary
      continue-on-error: true

  build-test:
    name: Package Build Test
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.11-build-${{ hashFiles('**/pyproject.toml') }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  validate-physics:
    name: Physics Validation
    runs-on: ubuntu-latest
    needs: [quality-check, build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.11-physics-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install matplotlib numpy scipy

    - name: Run physics validation scripts
      run: |
        echo "🔬 物理検証スクリプト実行中..."
        if [ -d validation/ ]; then
          find validation/ -name "check_*.py" -type f | while read script; do
            echo "📋 実行中: $script"
            python "$script" || echo "⚠️  $script で問題が発見されました"
          done
        else
          echo "📁 validation/ ディレクトリが見つかりません"
        fi
      continue-on-error: true

    - name: Physics validation summary
      run: |
        echo "## 🔬 物理検証結果" >> $GITHUB_STEP_SUMMARY
        echo "- **実行対象**: mainブランチへのプッシュ時のみ" >> $GITHUB_STEP_SUMMARY
        echo "- **検証スクリプト**: \`validation/\` ディレクトリ内" >> $GITHUB_STEP_SUMMARY
        echo "- **詳細**: 上記ログを参照" >> $GITHUB_STEP_SUMMARY 