"""
params_CO2_antisymm.py
======================
CO₂ 非対称伸縮振動 (ν₃) をポンプ・プローブで励起する簡易サンプル。
runner.py（linmol_dipole 版）と 1 対 1 で対応するパラメータセット。

単位
----
* 時間      : fs
* 周波数    : rad/fs  (= 2π × THz)
* 双極子    : C·m  （Debye → ×3.33564e-30）
"""

import numpy as np

# ------------------------------------------------------------------
# メタ情報
# ------------------------------------------------------------------
description = "CO2_antisymm_stretch"

# ------------------------------------------------------------------
# 時間軸
# ------------------------------------------------------------------
t_start   = -200.0                # fs
t_end     =  200.0                # fs
t_points  =  2000                 # サンプリング数
# runner.py 側では delay ごとに tlist を生成するので make_tlist は不要

# ------------------------------------------------------------------
# 電場パラメータ
# ------------------------------------------------------------------
durations  = [50.0, 80.0]      # fs (envelope σ)
polarizations = [
    [1, 0],                                   # x 軸偏光
    [1/np.sqrt(2), 1j/np.sqrt(2)],            # RHC
    [1/np.sqrt(2), (1+1j)/2],                 # arbitrary
]
carrier_freq = 2349.0 * (2*np.pi*1e12*1e-15)  # 2349 cm⁻¹ → rad/fs
amplitude    = 1.0                            # 任意スケール
gdd          = 0.0                            # fs²
tod          = 0.0                            # fs³
delays       = [0.0, 10.0, 20.0]            # fs

axes         = "xy"                           # Ex↔μ_x, Ey↔μ_y

# ------------------------------------------------------------------
# 系パラメータ  (CO₂ 非対称伸縮)
# ------------------------------------------------------------------
V_max = 2
J_max = 2

# Morse / Harmonic 切替え
potential_type = "harmonic"                   # or "morse"

omega = carrier_freq                           # ω₀ (rad/fs)
delta_omega = 10.0 * (2*np.pi*1e12*1e-15)      # 非調和補正 (rad/fs)
B  = 0.3902e-3 * (2*np.pi*1e12*1e-15)          # 回転定数 (rad/fs)
alpha = 0.0                                    # 遠心項を無視

# 双極子スケール
debye_unit = 3.33564e-30                       # 1 D → C·m
mu0_Cm = 0.3 * debye_unit                      # 0.3 Debye 相当

# ------------------------------------------------------------------
# ランタイム設定
# ------------------------------------------------------------------
backend       = "numpy"    # "numpy" or "cupy"
dense         = True       # True→ndarray / False→CSR
sample_stride = 1          # プロパゲータ出力間引き

# ---- ここまで -----------------------------------------------------
